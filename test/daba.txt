[{'code': 'Attribute VB_Name = "ThisWB"\r\nAttribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"\r\nAttribute VB_GlobalNameSpace = False\r\nAttribute VB_Creatable = False\r\nAttribute VB_PredeclaredId = True\r\nAttribute VB_Exposed = True\r\nAttribute VB_TemplateDerived = False\r\nAttribute VB_Customizable = True\r\n\'---------------------------------------------------------------------------------------\r\n\' Author        : Igor Vakhnenko                   Date: 25.12.2015\r\n\' Professional application development for Microsoft Excel\r\n\' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru\r\n\'---------------------------------------------------------------------------------------\r\n\r\nOption Explicit\r\n\r\nPrivate Sub Workbook_BeforeClose(Cancel As Boolean)\r\n    On Error Resume Next\r\n    If Not IE Is Nothing Then IE.Quit: Set IE = Nothing\r\n    If Not wHTTP Is Nothing Then Set wHTTP = Nothing\r\n\r\n    DeleteProgramCommandBar\r\nEnd Sub\r\n\r\nPrivate Sub Workbook_Open()\r\n    On Error Resume Next: Dim FirstRun As Boolean\r\n    FirstRun = SETT.IsFirstRun\r\n    If FirstRun Then ShowFirstRunForm\r\n    If SetupCancelled Then\r\n        Application.DisplayAlerts = False\r\n        If TrueDeveloper Then MsgBox "Setup Cancelled", vbInformation Else ThisWorkbook.Close False\r\n        Application.DisplayAlerts = True\r\n        Exit Sub\r\n    End If\r\n    Enable_AccessVBOM_Macro_DataConnections        \' disables notifications\r\n    SaveSetting PROJECT_NAME$, "Setup", "AddinPath", ThisWorkbook.FullName\r\n    \'If FirstRun Then If IsObject(F_Greeting) Then F_Greeting.Show\r\n    CreateProgramCommandBar 0\r\nEnd Sub\r\n\r\n'}
 {'code': 'Attribute VB_Name = "shm"\r\nAttribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"\r\nAttribute VB_GlobalNameSpace = False\r\nAttribute VB_Creatable = False\r\nAttribute VB_PredeclaredId = True\r\nAttribute VB_Exposed = True\r\nAttribute VB_TemplateDerived = False\r\nAttribute VB_Customizable = True\r\n\'---------------------------------------------------------------------------------------\r\n\' Add-in        : Parser                    URL: http://excelvba.ru/programmes/Parser\r\n\'\r\n\' Author        : Igor Vakhnenko            Date: 24.01.2014\r\n\' Professional application development for Microsoft Excel\r\n\' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru\r\n\'---------------------------------------------------------------------------------------\r\n\r\n#If VBA7 Then        \'  Office 2010-2013\r\n    Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _\r\n            (ByVal pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, _\r\n             ByVal dwReserved As LongPtr, ByVal lpfnCB As LongPtr) As LongPtr\r\n#Else        \'  Office 2003-2007\r\n    Private Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _\r\n                                               (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _\r\n                                                ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long\r\n#End If\r\n\r\nSub RunBuiltinParser()\r\n    On Error Resume Next\r\n    If Not AddinStarted Then Exit Sub\r\n    Application.Run "RunBuiltinParser_FromWorksheet", ActiveSheet\r\nEnd Sub\r\n\r\nSub ShowBuiltinParser()\r\n    On Error Resume Next\r\n    If Not AddinStarted Then Exit Sub\r\n    Application.Run "ShowBuiltinParser_FromWorksheet", ActiveSheet\r\nEnd Sub\r\n\r\nFunction AddinStarted() As Boolean\r\n    On Error Resume Next\r\n    \' ,    Parser\r\n    test$ = Application.Run("ParserAddinTest")\r\n    If Err.Number = 0 Then AddinStarted = True: Exit Function\r\n\r\n    If Err.Number = 1004 Then        \'    -   \r\n        \'       ,     \r\n        AddinPath$ = GetSetting("Parser", "Setup", "AddinPath", "")\r\n        If FileExists(AddinPath$) Then\r\n            Set WB = Workbooks.Open(AddinPath$)        \'   () \r\n            t = Timer: Err.Raise 777\r\n            While (Err > 0) And (Timer - t < 6)\r\n                Err.Clear: DoEvents: test$ = Application.Run("ParserAddinTest")        \'  \r\n            Wend\r\n            If Err.Number = 0 Then AddinStarted = True: Exit Function\r\n        End If\r\n    End If\r\n\r\n    \'   ,  ,  -  \r\n    ttl$ = "       "\r\n    msg$ = "      Parser     ." & vbNewLine & vbNewLine & _\r\n           "   ?"\r\n    If MsgBox(msg, vbQuestion + vbOKCancel, ttl$) = vbCancel Then Exit Function\r\n\r\n    URL$ = "http://excelvba.ru/php/download-last-version.php?addin=Parser"\r\n    AddinPath$ = CreateObject("WScript.Shell").SpecialFolders("Desktop") & "\\Parser.xla"\r\n\r\n    Kill AddinPath$\r\n    If URLDownloadToFile(0, URL$, AddinPath$, 0, 0) = 0 Then        \'   \r\n        If FileExists(AddinPath$) Then\r\n            Workbooks.Open AddinPath$        \'   () \r\n            Err.Clear: test$ = Application.Run("ParserAddinTest")        \'  \r\n            If Err.Number = 0 Then AddinStarted = True: Exit Function\r\n        End If\r\n    End If\r\n\r\n    msg$ = "        ExcelVBA.ru" & vbNewLine & _\r\n           "(,  Excel    )" & vbNewLine & vbNewLine & _\r\n           "      ,    ," & vbNewLine & _\r\n           "     Parser (   ,      )"\r\n\r\n    MsgBox msg$, vbExclamation, "      "\r\n    CreateObject("wscript.Shell").Run "http://excelvba.ru/programmes/Parser"\r\nEnd Function\r\n\r\nPrivate Function FileExists(ByVal filename$) As Boolean\r\n    On Error Resume Next: FileExists = CreateObject("Scripting.FileSystemObject").FileExists(filename$)\r\nEnd Function\r\n'}
 {'code': 'Attribute VB_Name = "mod_PriceFunctions"\r\n\'---------------------------------------------------------------------------------------\r\n\' Module        : mod_PriceFunctions                    Version:\r\n\' Author        : Igor Vakhnenko                   Date: 28.10.2015\r\n\' Professional application development for Microsoft Excel\r\n\' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru\r\n\'---------------------------------------------------------------------------------------\r\n\r\nOption Explicit: Option Compare Text: Option Private Module\r\n\r\nFunction GetPrice2(ByVal txt$, Optional filters$, Optional ExcludeChars$) As Double\r\n    \'    -.  2\r\n    On Error Resume Next\r\n    Dim res$, PriceClasses As Variant, ClassName, AttrName$, AttrValue$, TagName$, msg$, filter, LenTXT&, FilterApplied As Boolean\r\n    \'    - URL,    \r\n    If IsURL(txt$) Then msg$ = msg$ & CreateHTMLlink(txt$, "    ") & "<br />": txt = LoadFromURL_HTML(txt$)\r\n    If Trim(txt$) = "" Then\r\n        msg$ = msg$ & "   -     .<br />"\r\n        GoTo ExitSearchPrice\r\n    Else\r\n        msg$ = msg$ & "  ,  HTML : " & Len(txt) & "<br />"\r\n    End If\r\n\r\n    If Len(Trim(filters$)) Then\r\n        LenTXT& = Len(txt)\r\n        txt$ = ApplyHTMLFilters(txt$, filters$, msg$)        \'   HTML \r\n        If Len(txt) < LenTXT& Then FilterApplied = True\r\n    End If\r\n    \r\n    \'     <meta itemprop="price" content="...">\r\n    res$ = GetTags(txt, "meta", "itemprop", "price", "content 1")\r\n\r\n    \'    -     < itemprop="price">\r\n    If res$ = "" Then res$ = GetTags(txt, "any tag", "itemprop", "price", "OuterHTML 1")\r\n\r\n    Dim v, content$, cnt&, i&, TagText, price As Double, arr\r\n\r\n    \'   , -  ,       price\r\n    If res$ = "" Then\r\n        msg$ = msg$ & " itemprop=""price""  .<br />"\r\n\r\n        PriceClasses = Array("price", "productPrice", "*price*", "cost", "cena")\r\n\r\n        For Each ClassName In PriceClasses\r\n            res$ = GetTags(txt, "any tag", "class", ClassName, "outerHTML join")\r\n\r\n            If res Like "*#*#*" Then\r\n                res$ = Replace(res$, "bold", "")\r\n                res$ = GetTags(res$, "any tag", "AttributesPattern", "*[^h]old*", "DeleteTags")\r\n                If res Like "*#*#*" Then\r\n                    \' Debug.Print "found", res$\r\n                    arr = "": arr = Split(GetTags(res$, "any tag", "class", ClassName, "ConvertToText"), ARSEP)\r\n                    msg$ = msg$ & "      " & ClassName & " (" & UBound(arr) + 1 & " .)<br />"\r\n\r\n                    For Each TagText In arr\r\n                        \' Debug.Print "tag text", TagText\r\n                        price = SearchPriceInText(CStr(TagText), ExcludeChars$)\r\n                        If price Then msg$ = msg$ & "  " & price & "<br />": Exit For\r\n                    Next TagText\r\n                    If price Then Exit For\r\n                    msg$ = msg$ & "         " & ClassName & "   .<br />"\r\n                End If\r\n            End If\r\n        Next\r\n\r\n        \'    ,    \r\n        If FilterApplied And (price = 0) Then\r\n            price = SearchPriceInText(ConvertHTMLtoText(txt), ExcludeChars$)\r\n            If price Then\r\n                msg$ = msg$ & "    , -  <strong>    HTML</strong>.<br />"\r\n            Else\r\n                msg$ = msg$ & "  HTML    .<br />"\r\n            End If\r\n        End If\r\n\r\n    Else\r\n        price = SearchPriceInText(ConvertHTMLtoText(res), ExcludeChars$)\r\n        msg$ = msg$ & " itemprop=""price"" , -     " & price & ".<br />"\r\n    End If\r\n\r\n    GetPrice2 = price: Erase arr\r\nExitSearchPrice:\r\n    If Len(msg$) Then If TEST_ACTIONS_MODE Then AddBalloon msg$, IIf(price > 0, bt_Information, bt_Warning)\r\nEnd Function\r\n\r\nFunction SearchPriceInText(ByVal txt$, Optional ExcludeChars$) As Double\r\n    On Error Resume Next: Dim i&\r\n    txt$ = Trim(Application.Clean(txt$))\r\n    txt$ = Replace(txt$, " ", ""): txt$ = Replace(txt$, Chr(160), "")\r\n    For i = 1 To Len(txt$)\r\n        If Mid(txt$, i, 1) Like "#" Then txt$ = Mid(txt$, i): Exit For\r\n    Next i\r\n    For i = 2 To Len(txt$)\r\n        If Not (Mid(txt$, i, 1) Like "[0-9.,]") Then txt$ = Left(txt$, i - 1): Exit For\r\n    Next i\r\n    For i = 2 To Len(txt$)\r\n        If Not (Mid(txt$, i, 1) Like "[0-9.,]") Then txt$ = Left(txt$, i - 1): Exit For\r\n    Next i\r\n    For i = 1 To Len(ExcludeChars$)\r\n        If Not (Mid(ExcludeChars$, i, 1) Like "#") Then txt$ = Replace(txt$, Mid(ExcludeChars$, i, 1), "")\r\n    Next i\r\n\r\n\r\n    If txt Like "*#.###*" Then txt = Replace(txt, ".", "")\r\n    If txt Like "*#,###*" Then txt = Replace(txt, ",", "")\r\n    \'Debug.Print "txt", txt\r\n    If Val(Replace(txt$, ",", ".")) Then SearchPriceInText = Val(Replace(txt$, ",", "."))\r\nEnd Function\r\n\r\nFunction GetPrice(ByVal txt$) As Double\r\n    On Error Resume Next: Dim res$, PriceClasses As Variant, ClassName\r\n    \'    - URL,    \r\n    If IsURL(txt) Then txt = LoadFromURL_HTML(txt)\r\n\r\n    \'     <meta itemprop="price" content="...">\r\n    res$ = GetPropertyByItemprop(txt, "price", "meta", 1)\r\n\r\n    \'    -     < itemprop="price">\r\n    If res$ = "" Then res$ = GetPropertyByItemprop(txt, "price", "*", 1)\r\n\r\n    \'   , -  ,       price\r\n    PriceClasses = Array("price", "productPrice", "cost", "cena")\r\n    Dim v, TagName$, content$, cnt&, i&\r\n    If res$ = "" Then\r\n        With REGEXP\r\n            .IgnoreCase = True\r\n            For Each ClassName In PriceClasses\r\n                .Pattern = "<([A-Za-z0-9]+) [^<>]*class=""[^<>""]*" & ClassName & "[^<>""]*""[^<>]*>"\r\n                If .test(txt) Then\r\n                    For Each v In .Execute(txt)\r\n                        TagName$ = v.submatches.Item(0)\r\n                        content$ = Split(txt, v.Value)(1)\r\n                        \' Debug.Print tagname$, Left(Content$, 50)\r\n                        If Len(content$) * Len(TagName$) Then\r\n                            cnt& = 1\r\n                            For i = 1 To Len(content$)\r\n                                If Mid(content$, i, Len(TagName$) + 1) = "<" & TagName$ Then cnt& = cnt& + 1\r\n                                If Mid(content$, i, Len(TagName$) + 3) = "</" & TagName$ & ">" Then cnt& = cnt& - 1\r\n                                If cnt& = 0 Then res$ = Left(content$, i - 1): Exit For\r\n                            Next i\r\n                            If res Like "*#*#*" Then\r\n                                If res Like "*<*>*" Then res = HTML2TXT(res)\r\n\r\n                                For i = 1 To Len(res)\r\n                                    If Mid(res, i, 1) Like "#" Then res = Mid(res, i): Exit For\r\n                                Next i\r\n                                res = Replace(res, "&nbsp;", ""): res = Replace(res, " ", ""): res = Replace(res, Chr(160), "")\r\n                                res = Trim(Application.Clean(res))\r\n                                \'Debug.Print "res=""" & res & """"\r\n                                Exit For\r\n                            End If\r\n                        End If\r\n                    Next\r\n                End If\r\n            Next\r\n        End With\r\n    End If\r\n\r\n    If res Like "*<*>*" Then        \'       -   \r\n        res = HTML2TXT(res)\r\n        res = Replace(res, "&nbsp;", ""): res = Replace(res, " ", ""): res = Replace(res, Chr(160), "")\r\n    End If\r\n\r\n    If res Like "#*" Then        \'      - ,   \r\n        res = Replace(res, "&nbsp;", ""): res = Replace(res, " ", ""): res = Replace(res, Chr(160), "")\r\n        GetPrice = Val(res)\r\n    End If\r\nEnd Function\r\n\r\n'}
 {'code': 'Attribute VB_Name = "mod_CommonFunctions"\r\n\'---------------------------------------------------------------------------------------\r\n\' Module        : mod_CommonActions\r\n\' Author        : Igor Vakhnenko            Date: 11.11.2013\r\n\' Professional application development for Microsoft Excel\r\n\' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru\r\n\'---------------------------------------------------------------------------------------\r\n\r\nOption Compare Text\r\nOption Private Module\r\n\r\nFunction ColumnsStringToRangeAddress(ByVal txt$) As String\r\n    \' gets string like "A-F,8" and returns range "$A:$F,$H:$H"\r\n    On Error Resume Next\r\n    Dim ra As Range, col As Variant\r\n    With ThisWorkbook.Worksheets(1)\r\n        For Each col In ParseColumnsStringEx(txt)\r\n            If ra Is Nothing Then Set ra = .Cells(Val(col)) Else Set ra = Union(ra, .Cells(Val(col)))\r\n        Next\r\n    End With\r\n    ColumnsStringToRangeAddress = ra.EntireColumn.Address\r\nEnd Function\r\n\r\nFunction ParseColumnsStringEx(ByVal txt$, Optional ByRef norm1$, Optional ByRef norm2$) As Variant\r\n    \'       "A-C;8,,11-9, -; 4,21,"\r\n    \'   ()    Array(1,2,3,8,11,10,9,5,6,7,8,9,10,11,4,21)\r\n    \' (  ;   9-15  17-13 ,\r\n    \'      ,    )\r\n\r\n    On Error Resume Next\r\n    \'     \r\n    Const enARR$ = "ABCEHKMOPTX", ruARR$ = ""\r\n    Const cc& = 256        \'     \r\n    Dim i&, arr As Variant, j&, spl As Variant, cn&\r\n\r\n    For i = 1 To Len(enARR$): txt = Replace(txt, Mid(ruARR$, i, 1), Mid(enARR$, i, 1)): Next i\r\n    txt = Replace(txt, " ", ""): txt = Replace(txt, ";", ",")\r\n    txt = Replace(txt, ":", "-"): txt = Replace(txt, ".", ","): txt = UCase(txt)\r\n    For i = 1 To Len(txt)\r\n        If Not Mid(txt, i, 1) Like "[A-Z0-9,-]" Then Mid(txt, i, 1) = ","\r\n    Next i\r\n    While InStr(1, txt, ",,"): txt = Replace(txt, ",,", ","): Wend\r\n    While InStr(1, txt, "--"): txt = Replace(txt, "--", "-"): Wend\r\n    txt = Replace(txt, ",-", ","): txt = Replace(txt, "-,", ",")\r\n    If Left(txt, 1) = "-" Or Left(txt, 1) = "," Then txt = Mid(txt, 2)\r\n    If Right(txt, 1) = "-" Or Right(txt, 1) = "," Then txt = Left(txt, Len(txt) - 1)\r\n    norm1$ = Replace(txt$, ",", ", ")        \'       \r\n\r\n    arr = Split(txt$, ","): Dim n As Long: ReDim tmparr(0 To 0)\r\n    For i = LBound(arr) To UBound(arr)\r\n        spl = Split(arr(i), "-")\r\n        For j = LBound(spl) To UBound(spl)\r\n            cn& = 0: cn& = ColumnNameToColumnNumber(spl(j)): If cn& Then spl(j) = cn&\r\n            If Not spl(j) Like String(Len(spl(j)), "#") Then spl(j) = ""\r\n        Next j\r\n        If Val(spl(0)) > cc& Then spl(0) = "": spl(UBound(spl)) = ""\r\n        If Val(spl(UBound(spl))) > cc& Then spl(UBound(spl)) = cc&\r\n        If UBound(spl) > 1 Then arr(i) = spl(0) & "-" & spl(UBound(spl)) Else arr(i) = Join(spl, "-")\r\n        If UBound(spl) = 1 Then If spl(0) = spl(1) Then arr(i) = spl(0)\r\n        If UBound(spl) = 1 Then If spl(0) = "" Then arr(i) = spl(1)\r\n    Next i\r\n    norm2$ = Join(arr, ","): norm2$ = Replace(norm2$, ",-", ","): norm2$ = Replace(norm2$, "-,", ",")\r\n    While InStr(1, norm2$, ",,"): norm2$ = Replace(norm2$, ",,", ","): Wend\r\n    If Left(norm2$, 1) = "," Then norm2$ = Mid(norm2$, 2)\r\n    If Right(norm2$, 1) = "," Then norm2$ = Left(norm2$, Len(norm2$) - 1)\r\n\r\n    For i = LBound(arr) To UBound(arr)\r\n        Select Case True\r\n            Case arr(i) = "", Val(arr(i)) < 0\r\n            Case IsNumeric(arr(i))\r\n                tmparr(UBound(tmparr)) = arr(i): ReDim Preserve tmparr(0 To UBound(tmparr) + 1)\r\n            Case arr(i) Like "*#-#*"\r\n                spl = Split(arr(i), "-")\r\n                If UBound(spl) = 1 Then\r\n                    If IsNumeric(spl(0)) And IsNumeric(spl(1)) Then\r\n                        If spl(0) <= cc& Then\r\n                            If spl(1) > cc& Then spl(1) = cc&\r\n                            For j = Val(spl(0)) To Val(spl(1)) Step IIf(Val(spl(0)) > Val(spl(1)), -1, 1)\r\n                                tmparr(UBound(tmparr)) = j: ReDim Preserve tmparr(0 To UBound(tmparr) + 1)\r\n                            Next j\r\n                        End If\r\n                    End If\r\n                End If\r\n        End Select\r\n    Next i\r\n    If UBound(tmparr) Then\r\n        ReDim Preserve tmparr(0 To UBound(tmparr) - 1)\r\n        ParseColumnsStringEx = tmparr\r\n    End If\r\nEnd Function\r\n\r\nFunction GetFilePathEx(Optional ByVal FileType$ = "", Optional ByVal DialogTitle$, _\r\n                       Optional ByVal FilterDescription$ = "Excel files", Optional ByVal FilterExtention$ = "*.*") As String\r\n    On Error Resume Next\r\n    InitialPath$ = ThisWorkbook.Path & "\\"\r\n    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFileDialogCaption")\r\n    With Application.FileDialog(msoFileDialogOpen)\r\n        .ButtonName = tt("SelectButtonCaption"): .Title = DialogTitle$\r\n        .InitialFileName = SETT.GetText("GetFilePathEx_" & FileType, InitialPath)\r\n        .filters.Clear: .filters.Add FilterDescription, FilterExtention\r\n        If .Show <> -1 Then Exit Function\r\n        GetFilePathEx = .SelectedItems(1)\r\n        Folder$ = Left(.SelectedItems(1), InStrRev(.SelectedItems(1), "\\"))\r\n        SETT.SetText "GetFilePathEx_" & FileType, Folder$\r\n    End With\r\nEnd Function\r\n\r\nFunction PickNewColor(Optional ByVal i_OldColor As Double = xlNone) As Double\r\n    \' shows pick color dialog and returns selected color (RGB format)\r\n    On Error Resume Next:\r\n    PickNewColor = i_OldColor\r\n    Const BGColor As Long = 13160660, ColorIndexLast As Long = 32\r\n    Dim myOrgColor As Double, myNewColor As Double, WB As Workbook\r\n    Dim myRGB_R As Integer, myRGB_G As Integer, myRGB_B As Integer\r\n    If ActiveWorkbook Is Nothing Then Application.ScreenUpdating = False: Set WB = Workbooks.Add\r\n    myOrgColor = ActiveWorkbook.Colors(ColorIndexLast)        \'save original palette color\r\n\r\n    i_Color = IIf(i_OldColor = xlNone, BGColor, i_OldColor): myRGB_R = i_Color Mod 256\r\n    i_Color = i_Color \\ 256: myRGB_G = i_Color Mod 256\r\n    i_Color = i_Color \\ 256: myRGB_B = i_Color Mod 256\r\n    ActiveWorkbook.ResetColors        \'AppActivate Application.Name\r\n    If Application.Dialogs(xlDialogEditColor).Show(ColorIndexLast, myRGB_R, myRGB_G, myRGB_B) Then\r\n        PickNewColor = ActiveWorkbook.Colors(ColorIndexLast)\r\n        ThisWorkbook.Colors(ColorIndexLast) = myOrgColor\r\n    End If\r\n    If Not WB Is Nothing Then WB.Close False: Application.ScreenUpdating = True\r\nEnd Function\r\n\r\nFunction GetKeyName(ByVal KeyCode As Integer, ByVal Shift As Integer) As String\r\n    Select Case KeyCode\r\n        Case 112 To 135: Button$ = "F" & (KeyCode - 111)\r\n        Case 32: Button$ = "SpaceBar"\r\n        Case 8: Button$ = "BackSpace"\r\n        Case 9: Button$ = "Tab"\r\n        Case 13: Button$ = "Enter"\r\n        Case 16: Button$ = ""        \'"Shift"\r\n        Case 17: Button$ = ""        \'"Ctrl"\r\n        Case 18: Button$ = ""        \'"Alt"\r\n        Case 20: Button$ = "CapsLock"\r\n        Case 27: Button$ = "Esc"\r\n        Case 33: Button$ = "PageUp"\r\n        Case 34: Button$ = "PageDown"\r\n        Case 35: Button$ = "End"\r\n        Case 36: Button$ = "Home"\r\n        Case 37: Button$ = "Left Arrow"\r\n        Case 38: Button$ = "Up Arrow"\r\n        Case 39: Button$ = "Right Arrow"\r\n        Case 40: Button$ = "Down Arrow"\r\n        Case 44: Button$ = "PrintScreen"\r\n        Case 45: Button$ = "Insert"\r\n        Case 46: Button$ = "Delete"\r\n        Case vbKeyNumlock: Button$ = "Numlock"\r\n        Case 145: Button$ = "ScrollLock"\r\n\r\n        Case 91: Button$ = "Win(Left)"\r\n        Case 92: Button$ = "Win(Right)"\r\n        Case 96 To 105: Button$ = "Numpad (" & KeyCode - 96 & ")"\r\n        Case vbKeyMultiply: Button$ = "Numpad (*)"\r\n        Case vbKeyAdd: Button$ = "Numpad (+)"\r\n        Case vbKeySubtract: Button$ = "Numpad (-)"\r\n        Case vbKeyDecimal: Button$ = "Numpad (,)"\r\n        Case vbKeyDivide: Button$ = "Numpad (/)"\r\n\r\n        Case 166: Button$ = "Browser Back"\r\n        Case 167: Button$ = "Browser Forward"\r\n        Case 168: Button$ = "Browser Refresh"\r\n        Case 169: Button$ = "Browser Stop"\r\n        Case 170: Button$ = "Browser Search"\r\n        Case 171: Button$ = "Browser Favorites"\r\n        Case 172: Button$ = "Browser Home"\r\n        Case 173: Button$ = "Volume Mute"\r\n        Case 174: Button$ = "Volume Down"\r\n        Case 175: Button$ = "Volume Up"\r\n        Case 176: Button$ = "Next Track"\r\n        Case 177: Button$ = "Previous Track"\r\n        Case 178: Button$ = "Stop Media"\r\n        Case 179: Button$ = "Play/Pause"\r\n        Case 180: Button$ = "Start Mail"\r\n        Case 181: Button$ = "Select Media"\r\n        Case 182: Button$ = "Start App 1"\r\n        Case 183: Button$ = "Start App 2"\r\n\r\n        Case 48 To 57, 65 To 90: Button$ = Chr(KeyCode)\r\n        Case Else: Button$ = "{button " & KeyCode & "}"\r\n    End Select\r\n\r\n    If Len(Button$) Then\r\n        If (Shift And 1) Then GetKeyName = GetKeyName & "Shift + "\r\n        If (Shift And 2) Then GetKeyName = GetKeyName & "Ctrl + "\r\n        If (Shift And 4) Then GetKeyName = GetKeyName & "Alt + "\r\n    End If\r\n    GetKeyName = GetKeyName & Button$\r\nEnd Function\r\n\r\nFunction ColumnNameByColumnNumber(ByVal col As Long) As String\r\n    resA1 = Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1)\r\n    ColumnNameByColumnNumber = col & " " & Split(resA1, "$")(1) & ""\r\nEnd Function\r\n\r\nFunction ColumnNameToColumnNumber(ByVal txt$) As Long\r\n    On Error Resume Next    \'     .       0\r\n    ColumnNameToColumnNumber = Split(Application.ConvertFormula(txt$ & "1", xlA1, xlR1C1, True), "C")(1)\r\nEnd Function\r\n\r\nFunction GetResponse(ByRef BytesArr, ByVal Encoding$) As String\r\n    On Error Resume Next\r\n    Dim ResponseFilename$\r\n    Set ADODBStream = CreateObject("ADODB.Stream")\r\n    With ADODBStream\r\n        ResponseFilename$ = Environ("tmp") & "\\response.txt"\r\n        If Len(Encoding$) Then .Charset = Encoding$\r\n        .Type = 1        \' adTypeBinary:\r\n        .Open: .Write BytesArr\r\n        .SaveToFile ResponseFilename$, 2\r\n        .Type = 2        \'adTypeText\r\n        .LoadFromFile ResponseFilename$\r\n        GetResponse = .ReadText\r\n        .Close\r\n        Kill ResponseFilename$\r\n    End With\r\n    Set ADODBStream = Nothing\r\nEnd Function\r\n\r\nFunction WEB_PARSERS_FOLDER$()\r\n    WEB_PARSERS_FOLDER$ = "resources/" & PROJECT_NAME$ & "/samples"\r\nEnd Function\r\n\r\nFunction IsURL(ByVal txt$) As Boolean\r\n    On Error Resume Next\r\n    IsURL = IsURL Or (txt$ Like "http://?*.?*")\r\n    IsURL = IsURL Or (txt$ Like "https://?*.?*")\r\nEnd Function\r\n\r\nFunction FileFormatByExtension(ByVal ext$) As XlFileFormat\r\n    Select Case ext$\r\n        Case "CSV", "DAT", "TXT": FileFormatByExtension = xlCSV\r\n        Case "XLS": FileFormatByExtension = xlWorkbookNormal\r\n        Case "XLSB": FileFormatByExtension = xlExcel12\r\n        Case "XLSX": FileFormatByExtension = xlOpenXMLWorkbook\r\n        Case "XLSM": FileFormatByExtension = xlOpenXMLWorkbookMacroEnabled\r\n        Case Else: FileFormatByExtension = xlWorkbookNormal\r\n    End Select\r\nEnd Function\r\n\r\n\r\nFunction RemoveExtraSeparators(ByRef txt$, Optional ByVal sep$ = ARSEP)\r\n    On Error Resume Next\r\n    If sep$ = "" Then Exit Function\r\n    Dim sep2$: sep2$ = sep$ & sep$\r\n    While InStr(1, txt$, sep2$, vbBinaryCompare): txt$ = Replace(txt$, sep2$, sep$): Wend\r\n    If txt$ Like "*" & sep$ Then txt = Left(txt, Len(txt) - Len(sep$))\r\n    If txt$ Like sep$ & "*" Then txt = Mid(txt, Len(sep$) + 1)\r\nEnd Function\r\n\r\nSub ExtendOrCollapseForm(ByRef CB As CommandButton)\r\n    On Error Resume Next\r\n    \' \\   \r\n    Set UF = CB.Parent\r\n    If UF Is Nothing Then Exit Sub\r\n    \'Dim zo&, k As Double: zo = SETT.GetNumber("ComboBox_Zoom", 100): If zo < 40 Then zo = 100\r\n\r\n    \'        ,   :\r\n    \' : h=200-414 hide=Frame2,Frame4,Frame5\r\n    txt_height$ = Split(Split(UF.Tag)(0), "h=")(1)\r\n    If Not txt_height Like "#*-*#" Then Exit Sub\r\n    H1& = Split(txt_height, "-")(0)\r\n    H2& = Split(txt_height, "-")(1)\r\n\r\n    txt_hide$ = Split(Split(UF.Tag)(1), "hide=")(1)\r\n    arr_hide = Split(txt_hide, ",")\r\n\r\n\r\n    Dim NormalMode As Boolean        \' TRUE,     \r\n    NormalMode = CB.Caption Like "* >>"\r\n\r\n    NewHeight& = IIf(NormalMode, H2&, H1&)\r\n    \'k = Round(IIf(IIf(NormalMode, H1&, H2&) = UF.Height, zo / 100, 1), 2)\r\n    \r\n    ButtonsPositionBottom = UF.Height - CB.Top \'* k\r\n    UF.Height = NewHeight& \' * k\r\n    \r\n    For Each Item In arr_hide\r\n        UF.Controls(Item).Visible = NormalMode\r\n    Next\r\n\r\n    For Each Button In UF.Controls\r\n        If Button.Name Like "CommandButton*" Then\r\n            If Button.HelpContextID = 2 Then\r\n                Button.Top = UF.Height - ButtonsPositionBottom\r\n            End If\r\n        End If\r\n    Next\r\n    CB.Caption = CB.Tag & " " & IIf(NormalMode, " <<", " >>")\r\n    UF.Height = UF.Height\r\nEnd Sub\r\n\r\n\r\nFunction ClearLinksErrors(ByVal txt$) As String\r\n    On Error Resume Next\r\n    txt$ = Replace(txt$, "=""about:blank", "=""")\r\n    txt$ = Replace(txt$, "=""about:", "=""")\r\n    ClearLinksErrors = txt$\r\nEnd Function\r\n'}
 {'code': 'Attribute VB_Name = "mod_Main"\r\n\'---------------------------------------------------------------------------------------\r\n\' Module        : mod_Main                    Version:\r\n\' Author        : Igor Vakhnenko                   Date: 16.10.2015\r\n\' Professional application development for Microsoft Excel\r\n\' http://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru\r\n\'---------------------------------------------------------------------------------------\r\n\r\nOption Compare Text: Option Private Module        \': Option Explicit\r\nPublic Const PROJECT_NAME$ = "Parser", PROJECT_YEAR& = 2013\r\n\r\nPrivate Sub CreateCommandBar(): CreateProgramCommandBar 0: End Sub\r\n\r\nSub CreateProgramCommandBar(Optional ByVal RefreshOnly As Boolean = True)\r\n    On Error Resume Next\r\n    SaveDefaultSettings\r\n\r\n    Dim AddinMenu As CommandBar, coll As Collection, i&, MainMacroButton As Object, NeedToSelectParser As Boolean\r\n    Application.ScreenUpdating = False\r\n    If Not RefreshOnly Then Run DeleteOldCommandBar\r\n    Set AddinMenu = GetCommandBar(PROJECT_NAME, True Or RefreshOnly)\r\n\r\n    \' menu begin\r\n\r\n    Set coll = FilenamesCollection(PARSERS_FOLDER$, "*" & PARSER_EXT$, 1)\r\n    curr_WP_name$ = CURRENT_PARSER$\r\n\r\n    Dim APs As WebsiteParsers, combo As CommandBarComboBox\r\n    Set APs = AllParsers(True)        \' APs.LoadAllFromFolder\r\n    If APs.Items.Count > 0 Then\r\n        Mode& = IIf(APs.Items.Count = 1, msoComboNormal, msoComboLabel)\r\n        \' Mode& = msoComboNormal\r\n        Set combo = Add_Control(AddinMenu, ct_DROPDOWN, 0, "ChangeActiveParser_FromMenu", tt("MENU_Parser") & ": ", Mode&, True, "DFS_FromMenu")\r\n        WP_arr = APs.ToArray\r\n        For i = LBound(WP_arr) To UBound(WP_arr): combo.AddItem WP_arr(i): Next i\r\n        For i = 1 To combo.ListCount\r\n            If combo.list(i) = curr_WP_name$ Then combo.ListIndex = i: Exit For\r\n        Next i\r\n        NeedToSelectParser = combo.ListIndex = 0\r\n        combo.OnAction = "\'" & ThisWorkbook.Name & "\'!ChangeActiveParser_FromMenu"\r\n\r\n        If NeedToSelectParser = True And coll.Count = 1 Then\r\n            curr_WP_name$ = WP_arr(1)\r\n            CURRENT_PARSER$ curr_WP_name$\r\n            combo.ListIndex = 1\r\n            NeedToSelectParser = False\r\n        End If\r\n    End If\r\n\r\n    If coll.Count Then\r\n        \' 3021, 1075, 6280, 6522\r\n        Add_Control(AddinMenu, ct_BUTTON, 0, "0", " ", msoButtonCaption, False).Enabled = 0\r\n\r\n        If NeedToSelectParser Then\r\n            Add_Control(AddinMenu, ct_BUTTON, 0, "0", tt("MENU_SelectParserOrCreateNewOne"), msoButtonCaption, True).Enabled = 0\r\n        Else\r\n            Set MainMacroButton = Add_Control(AddinMenu, ct_BUTTON, 6280, "StartParcing", tt("MENU_StartLoading"), msoButtonIconAndCaption, False)\r\n            \' Add_Control AddinMenu, ct_BUTTON, 6280, "StartParcing", tt("MENU_StartLoading"), msoButtonIconAndCaption, False\r\n            Add_Control(AddinMenu, ct_BUTTON, 0, "0", tt("MENU_or"), msoButtonCaption, False).Enabled = 0\r\n            Add_Control AddinMenu, ct_BUTTON, 548, "EditActiveParser", tt("MENU_Configure"), msoButtonIconAndCaption, False\r\n        End If\r\n    Else\r\n        Add_Control AddinMenu, ct_BUTTON, 548, "AddNewParser", tt("MENU_CreateAndConfigureNewParser"), msoButtonIconAndCaption, True\r\n    End If\r\n\r\n\r\n    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0\r\n    Set subMenu2 = Add_Control(AddinMenu, ct_POPUP, 0, "", tt("MENU_ExtraSettings"), , True)\r\n\r\n    Add_Control subMenu2, ct_BUTTON, 1664, "AddNewParser", tt("MENU_AddNewParser"), msoButtonIconAndCaption, True\r\n\r\n    If coll.Count > 1 Then\r\n        Set subMenu_PC = Add_Control(subMenu2, ct_POPUP, 548, "", tt("MENU_EditParser"), msoButtonIconAndCaption, False)\r\n        If coll.Count > 25 Then\r\n            stp& = 10\r\n            For i& = 1 To coll.Count Step stp&\r\n                i1& = i: i2& = Application.Min(i + stp& - 1, coll.Count)\r\n                capt$ = tt("MENU_ParserDropdownPrefix") & " " & UCase(Left(Dir(coll(i1)), 1)) & " .. " & UCase(Left(Dir(coll(i2)), 1)) & "  (" & i2 - i1 + 1 & ")"\r\n                Set subMenu_PC_ = Add_Control(subMenu_PC, ct_POPUP, 502, "", capt$, msoButtonIconAndCaption)\r\n                For ind& = i1 To i2\r\n                    filename = Replace(Dir(coll(ind&)), PARSER_EXT$, "")\r\n                    Add_Control subMenu_PC_, ct_BUTTON, 3885, "EditParser", filename, msoButtonIconAndCaption, , coll(ind&)\r\n                Next ind\r\n            Next i\r\n        Else\r\n            For Each filename In coll\r\n                Add_Control subMenu_PC, ct_BUTTON, 3885, "EditParser", Replace(Dir(filename), PARSER_EXT$, ""), msoButtonIconAndCaption, , filename\r\n            Next\r\n        End If\r\n\r\n        If Not NeedToSelectParser Then\r\n            Add_Control subMenu2, ct_BUTTON, 3265, "DeleteActiveParser", tt("MENU_DeleteCurrentParser", curr_WP_name$), msoButtonIconAndCaption, True\r\n        End If\r\n    End If\r\n\r\n    Add_Control subMenu2, ct_BUTTON, 222, "ShowSettingsPage", tt("MENU_CommonSettings"), msoButtonIconAndCaption, True\r\n    Add_Control subMenu2, ct_BUTTON, 1759, "CreateProgramCommandBar", tt("MENU_refreshToolbar"), msoButtonIconAndCaption\r\n    Add_Control subMenu2, ct_BUTTON, 1, "ShowParserDescriptionAtLocalhost", tt("MENU_ShowAlgorithm"), msoButtonIconAndCaption, True\r\n    Add_Control subMenu2, ct_BUTTON, 543, "Edit_ReplaceTables", tt("MENU_ReplaceTables"), msoButtonIconAndCaption, True\r\n    Add_Control subMenu2, ct_BUTTON, 0, "DeleteScheduledTasks", "    ", msoButtonIconAndCaption, True\r\n\r\n    If